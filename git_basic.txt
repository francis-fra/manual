#------------------------------------------------------------------
# Config
#------------------------------------------------------------------
# to start a new git
git init

# config file and ignore file
~/.gitconfig
~/.gitignore

# help
git help <command>

# to check config
git config --list

# file status
git status

# status with details
git status -p

#------------------------------------------------------------------
# key command:
#------------------------------------------------------------------
# update local from github
git pull origin master

# update github from local
git push origin master

#------------------------------------------------------------------
# Log
#------------------------------------------------------------------
# one line log
git log --pretty=oneline

git log --oneline --decorate

# show full graph
git log --oneline --decorate -- graph --all

# check log file
git log --stat
git log --graph


#------------------------------------------------------------------
# Basics
#------------------------------------------------------------------
# to add files to staging area
# modified files (not staged to commit)
git add <filenames>

# to stages deleted files 
git rm <filenames>

# to remove files from the staging area
git reset <filenames>

# moving files
# this is equivalent to
# rename file, delete from git repository and add to repository
git mv <file_from> <file_destination>

# to commit all changes
git commit -m "comment"

# commit without staging (all modified files are committed)
git commit -a -m "comment"

# To remove the whole repository
rm -rf .git

# ignore files
git config --global core.excludesfile ~/.gitignore


#------------------------------------------------------------------
# Undo
#------------------------------------------------------------------
# amend commit: the second commit replaces the first
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend

# to unstage a staging file
git reset HEAD <file>

# undo a modified file
git checkout -- <file>

#------------------------------------------------------------------
# Remote
#------------------------------------------------------------------
# to show all URLs that Git stored
git remote -v

# add additional remote url
git remote add <name> <url>
e.g. git remote add pb  https://github.com/paulboone/ticgit

# to change remote URL
git remote set-url origin <url>

# inspect a remote
git remote show origin

# rename remote alias
git remote rename <old_alias> <new_alias>
e.g. git remote rename pb paul

# remove
git remote rm <remote_name>
e.g. git remote rm pb


#------------------------------------------------------------------
# github
#------------------------------------------------------------------
# to upload to github
git remote add origin <repository url> (e.g. https://github.com/francis-fra/R_code.git)
# can replace master with a branch name
git push -u origin master

# fetch and merge with the repository in github
git pull origin master

# to save credentials in cache for 1 hour
git config --global credential.helper 'cache --timeout=3600'


# unmodify files (NOTE: this will replace modified files completely without any backup!!)
git checkout -- <file_name>



#------------------------------------------------------------------
# fetch - download only
#------------------------------------------------------------------
# to get the changes from the remote (synchronize)
# fetching from remote (e.g. origin)
# it downloads only not merge!!
git fetch <remote_name>

# to get a remote repository not yet in local
git fetch <name>
e.g. git fetch origin


#------------------------------------------------------------------
# Pull - download + merge
#------------------------------------------------------------------
# pull: automatically fetch and then merge (fetch + merge)
git pull

#------------------------------------------------------------------
# Push - share
#------------------------------------------------------------------
# publish to the remote
# works only when no one else has pushed before you
# if the remote has changed by some one, then need to fetch first
# before push again
git push <remote_name> <branch_name>
e.g. git push origin master


#------------------------------------------------------------------
# Tag
#------------------------------------------------------------------
# add
git tag -a <tag_name> -m "comment"

# show
git tag

# to examine check point using tag
git show <tag_name>




#------------------------------------------------------------------
# check differences
#------------------------------------------------------------------
# compare current (not staged) with last commit
git diff

# compare staged changes to last commit
git diff --staged

# linux command
diff -u old_file new_file

git diff old_file new_file

# check differences of file since last commit
git diff -- current_file

# difference between github and local
git diff master origin/master

# to restore the previous version
git checkout old_version_id


#------------------------------------------------------------------
# branches
#------------------------------------------------------------------
# Default branch name is master
# After making commit, the master branch moves forward automatically
# current branch
# the current branch is identfied by a pointer called HEAD
git branch

# create a new branch (like creating a pointer)
git branch <branch_name>

# switch branch
# i.e. move the HEAD pointer
git checkout <branch_name>
# e.g. git checkout testing

# create a branch and switch to it
git checkout -b <branch_name>

# delete a branch
git branch -d <branch_name>

#------------------------------------------------------------------
# branch management
#------------------------------------------------------------------
# list all branches
git branch -a

# list all remote branches
git branch -r

# last commit
git branch -v

# to switch to previous tag
git checkout tags/<tag_name>

# to move (recreate) master back to origin (remote) or other branch
git checkout -B master origin/master

# checkout old commit and create a new branch
git checkout -b <branch_name> <id>
e.g. git checkout -b oldbranch 49d43de


#------------------------------------------------------------------
# Merge
#------------------------------------------------------------------
# fast forward merge
# suppose a new branch is directly ahead of the master
# to join the master with the new branch, so they are pointed to the same snapshot
git checkout master
git merge <branch_name>

# fork (recursive) merge
# merge two branches with a common ancestor
# the result is that a new snapshot is created by joining the two branches
git checkout master
git merge <branch_name>


# graphical merge
git mergetool


# merge remote git with local git
# this will create a new branch in the local, called origin/master
# to synchronize
git fetch origin


# git with saved authentication
git config --global credential.helper cache.

# delete local branch
git branch -d <branch_name>

# retrieve old commit and create a new branch
git checkout -b <new_name> <old_commit>

# rename a branch
git branch -m <old_name> <new_name>

# git show <commit_id>



# delete remote branches
git push <remote_name> --delete <branch_name>

# rebase
# instead of merging the two branches and create a new one
# the rebase command merged the changes and pointed to it 
# the master branch stays where it is
git checkout <new_branch>
git rebase master


#------------------------------------------------------------------
# remote git
#------------------------------------------------------------------
# to store the git repository to local
scp -r my_project.git user@git.example.com:/srv/git


 
